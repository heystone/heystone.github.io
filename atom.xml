<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>石头的前端Blog</title>
  
  <subtitle>不跟使用IE的人做朋友</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://heyheystone.com/"/>
  <updated>2018-09-11T08:26:35.679Z</updated>
  <id>http://heyheystone.com/</id>
  
  <author>
    <name>石头</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Git基本知识和常用命令（一）</title>
    <link href="http://heyheystone.com/gitcommand/"/>
    <id>http://heyheystone.com/gitcommand/</id>
    <published>2018-09-07T10:06:56.000Z</published>
    <updated>2018-09-11T08:26:35.679Z</updated>
    
    <content type="html"><![CDATA[<h2 id="常用的一些基本的Git命令"><a href="#常用的一些基本的Git命令" class="headerlink" title="常用的一些基本的Git命令"></a>常用的一些基本的Git命令</h2><p>对Git的了解只是存在于表面，平时里用的最多最多的命令也就是一下几个了<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">git init    <span class="comment">//初始化仓库</span></span><br><span class="line">git add xxx  <span class="comment">//把文件添加到仓库</span></span><br><span class="line">git commit -m <span class="string">"xxx"</span>  <span class="comment">//文件提交到仓库</span></span><br><span class="line">git push <span class="comment">//推送到远程库</span></span><br><span class="line">git pull <span class="comment">// 从远程库拉取</span></span><br><span class="line">git clone <span class="comment">//从远程库克隆工程</span></span><br><span class="line">git log  <span class="comment">//显示操作日志</span></span><br><span class="line">git log --pretty=oneline  <span class="comment">//格式化可加参数</span></span><br></pre></td></tr></table></figure></p><p>也是下班的时间里，看了廖雪峰老师的关于Git的介绍，学习了一下，顺便蹭个加班，总结一下，要看原版的地址在这里<br><a href="https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000" target="_blank" rel="noopener">廖雪峰Git介绍</a></p><h3 id="版本回退"><a href="#版本回退" class="headerlink" title="版本回退"></a>版本回退</h3><p>在Git中，用HEAD表示当前版本，上一个版本就是HEAD^，上上一个版本就是HEAD^^  依次类推<br>要回退到上一个版本的话执行命令<br><code>git reset --hard HEAD^</code><br>依次类推，但是要回归的版本太多，总不能一直用HEAD^^^吧，这也不太现实，所以需要找到某一个版本的一个唯一的id,<br>可以通过<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$ git log</span><br><span class="line">commit e475afc93c209a690c39c13a46716e8fa000c366 (HEAD -&gt; master)</span><br><span class="line">Author: Michael Liao &lt;askxuefeng@gmail.com&gt;</span><br><span class="line"><span class="built_in">Date</span>:   Fri May <span class="number">18</span> <span class="number">21</span>:<span class="number">03</span>:<span class="number">36</span> <span class="number">2018</span> +<span class="number">0800</span></span><br><span class="line"></span><br><span class="line">    add distributed</span><br><span class="line"></span><br><span class="line">commit eaadf4e385e865d25c48e7ca9c8395c3f7dfaef0</span><br><span class="line">Author: Michael Liao &lt;askxuefeng@gmail.com&gt;</span><br><span class="line"><span class="built_in">Date</span>:   Fri May <span class="number">18</span> <span class="number">20</span>:<span class="number">59</span>:<span class="number">18</span> <span class="number">2018</span> +<span class="number">0800</span></span><br><span class="line"></span><br><span class="line">    wrote a readme file</span><br></pre></td></tr></table></figure></p><p>可以看到每次操作后面都有一串常常的SHA1码了吧，那就是记录版本的唯一id，我们要回退到哪一个版本只需要操作<br><code>git reset --hard e475a</code><br>只需要输入前几位就行了，git会自动匹配，如果操作记录比较多，就多输入几位，但是版本回退有一个问题就是，如果我回退以后<br>又后悔了怎么办，因为你回退以后，再运行 git log就看不到回退版本以后的那些版本了，怎么办呢？git当然是有办法的了。</p><h3 id="版本前进"><a href="#版本前进" class="headerlink" title="版本前进"></a>版本前进</h3><p>命令 reflog 可查看每一次的命令<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ git reflog</span><br><span class="line">e475afc HEAD@&#123;<span class="number">1</span>&#125;: reset: moving to HEAD^</span><br><span class="line"><span class="number">1094</span>adb (HEAD -&gt; master) HEAD@&#123;<span class="number">2</span>&#125;: commit: append GPL</span><br><span class="line">e475afc HEAD@&#123;<span class="number">3</span>&#125;: commit: add distributed</span><br><span class="line">eaadf4e HEAD@&#123;<span class="number">4</span>&#125;: commit (initial): wrote a readme file</span><br></pre></td></tr></table></figure></p><p>然后重复操作<br><code>git reset --hard xxxx</code><br>就好了</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;常用的一些基本的Git命令&quot;&gt;&lt;a href=&quot;#常用的一些基本的Git命令&quot; class=&quot;headerlink&quot; title=&quot;常用的一些基本的Git命令&quot;&gt;&lt;/a&gt;常用的一些基本的Git命令&lt;/h2&gt;&lt;p&gt;对Git的了解只是存在于表面，平时里用的最多最多的命
      
    
    </summary>
    
      <category term="git" scheme="http://heyheystone.com/categories/git/"/>
    
    
      <category term="github" scheme="http://heyheystone.com/tags/github/"/>
    
  </entry>
  
  <entry>
    <title>第一次将工程上传GitHub</title>
    <link href="http://heyheystone.com/gitpush/"/>
    <id>http://heyheystone.com/gitpush/</id>
    <published>2018-09-05T09:59:38.000Z</published>
    <updated>2018-09-11T08:26:43.778Z</updated>
    
    <content type="html"><![CDATA[<p>第一次提交代码的一般步骤：<br>1、新建仓库,不要手残点击生成readme.md,后面提交会有很多意外的坑<br>2、进入项目目录执行 <code>git init</code><br>3、<code>git add .</code><br>4、<code>git commit -m &quot;&quot;</code><br>5、<code>git remote add origin https://github.com/heystone/wx.git</code> 改成自己的仓库地址<br>6、<code>git pull</code><br>报错：<br><code>fatal: refusing to merge unrelated histories</code><br>执行：<br><code>git merge origin/master --allow-unrelated-histories</code><br>7、<code>git push</code></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;第一次提交代码的一般步骤：&lt;br&gt;1、新建仓库,不要手残点击生成readme.md,后面提交会有很多意外的坑&lt;br&gt;2、进入项目目录执行 &lt;code&gt;git init&lt;/code&gt;&lt;br&gt;3、&lt;code&gt;git add .&lt;/code&gt;&lt;br&gt;4、&lt;code&gt;git com
      
    
    </summary>
    
      <category term="问题汇总 git" scheme="http://heyheystone.com/categories/%E9%97%AE%E9%A2%98%E6%B1%87%E6%80%BB-git/"/>
    
    
      <category term="github" scheme="http://heyheystone.com/tags/github/"/>
    
  </entry>
  
  <entry>
    <title>D3+Arcgis地图实现简单的迁徙图</title>
    <link href="http://heyheystone.com/arcd3/"/>
    <id>http://heyheystone.com/arcd3/</id>
    <published>2018-09-01T02:41:48.000Z</published>
    <updated>2018-09-11T08:27:08.508Z</updated>
    
    <content type="html"><![CDATA[<p>&nbsp;项目中有需要很多数据可视化的图表，用的最多的也就数当前的Echarts了，用过的同学都应该清楚，基本的图表来说Echarts做的已经很好了，<br>但是诟病最多的也当属Echarts的定制度不高，可配置性差，有时候需要调一点样式，都很难实现，所以最近想开始学习一下D3.js，D3的优势<br>就之一也就是其高度的可定制化，完全都是自己来画的，但这也是其上手比较难的主要原因，需要有基本的前端Dom、JS、CSS基础才能做出比较<br>炫酷的图表，不过也不至于灰心，慢慢去做就好了。<br>&nbsp;目前项目中遇到一个ArcGIS地图上做迁徙图的功能，网上也有Echarts结合ArcGIS做的实例，本着爱折腾的态度，正合适去学习一下D3，自己着手去做了<br>一下小demo，也没去完善，给大家一个参考。<br>&nbsp;首先看下最终效果图：<br><img src="/images/D3_Arcgis/overlay.png" alt="迁徙图效果图"></p><h2 id="首先引用D3-js目前是V5版本："><a href="#首先引用D3-js目前是V5版本：" class="headerlink" title="首先引用D3.js目前是V5版本："></a>首先引用D3.js目前是V5版本：</h2><p><code>&lt;script src=&quot;https://d3js.org/d3.v5.min.js&quot;&gt;&lt;/script&gt;</code><br>可以去<a href="https://d3js.org/" target="_blank" rel="noopener">D3.js官网</a>下载</p><h2 id="引入ArcGIS类库"><a href="#引入ArcGIS类库" class="headerlink" title="引入ArcGIS类库"></a>引入ArcGIS类库</h2><p>我用的是4.6，目前最新的是4.8了<br><code>&lt;link rel=&quot;stylesheet&quot; href=&quot;https://js.arcgis.com/4.8/esri/css/main.css&quot;&gt;</code><br><code>&lt;script src=&quot;https://js.arcgis.com/4.8/&quot;&gt;&lt;/script&gt;</code><br>可以去<a href="https://developers.arcgis.com/javascript/latest/guide/get-api/index.html" target="_blank" rel="noopener">ArcGIS官网</a>下载</p><h2 id="初始化加载ArcGIS地图"><a href="#初始化加载ArcGIS地图" class="headerlink" title="初始化加载ArcGIS地图"></a>初始化加载ArcGIS地图</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">init</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">require</span>([<span class="string">"esri/views/MapView"</span>,</span><br><span class="line">  <span class="string">"esri/Map"</span>,</span><br><span class="line">  <span class="string">"esri/layers/OpenStreetMapLayer"</span>,</span><br><span class="line">  <span class="string">"esri/geometry/Extent"</span>,</span><br><span class="line">  <span class="string">"esri/geometry/Point"</span>,</span><br><span class="line">  <span class="string">"esri/geometry/ScreenPoint"</span>,</span><br><span class="line">  <span class="string">"esri/tasks/support/Query"</span>,</span><br><span class="line">  <span class="string">"esri/tasks/QueryTask"</span></span><br><span class="line">  ], <span class="function"><span class="keyword">function</span>(<span class="params">MapView,</span></span></span><br><span class="line"><span class="function"><span class="params">                  Map,</span></span></span><br><span class="line"><span class="function"><span class="params">                  OpenStreetMapLayer,</span></span></span><br><span class="line"><span class="function"><span class="params">                  Extent,</span></span></span><br><span class="line"><span class="function"><span class="params">                  Point,</span></span></span><br><span class="line"><span class="function"><span class="params">                  ScreenPoint,</span></span></span><br><span class="line"><span class="function"><span class="params">                  Query,</span></span></span><br><span class="line"><span class="function"><span class="params">                  QueryTask</span>) </span>&#123; </span><br><span class="line">          myMap = <span class="keyword">new</span> <span class="built_in">Map</span>(&#123;</span><br><span class="line">              basemap:<span class="string">'osm'</span></span><br><span class="line">          &#125;);</span><br><span class="line">          view = <span class="keyword">new</span> MapView(&#123;</span><br><span class="line">              map: myMap,</span><br><span class="line">              container: <span class="string">"mapContainer"</span>,</span><br><span class="line">              center : [<span class="number">112.53</span>,<span class="number">37.87</span>],</span><br><span class="line">      zoom : <span class="number">12</span>,</span><br><span class="line">          &#125;);</span><br><span class="line">                    <span class="comment">//由于我用的是测试数据，我在这自己发布了一个图层，调取他们的坐标</span></span><br><span class="line">          <span class="keyword">var</span> layer=<span class="string">"http://xx.xx.x.x:6080/y/MapServer"</span></span><br><span class="line">      <span class="keyword">var</span> queryTask = <span class="keyword">new</span> QueryTask(layer+<span class="string">"/0"</span>);</span><br><span class="line">          <span class="keyword">var</span> query= <span class="keyword">new</span> Query();</span><br><span class="line">          query.where = <span class="string">"1 = 1"</span>;</span><br><span class="line">          query.outFields = [<span class="string">"*"</span>];</span><br><span class="line">          query.returnGeometry = <span class="literal">true</span>;</span><br><span class="line">          queryTask.execute(query).then(<span class="function"><span class="keyword">function</span>(<span class="params">results</span>)</span>&#123;</span><br><span class="line">          <span class="keyword">if</span> (results.features.length &gt;= <span class="number">1</span>) &#123;</span><br><span class="line">            reyuan = results.features;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;);</span><br><span class="line">                    <span class="comment">//监听平移，缩放和旋转</span></span><br><span class="line">          view.watch(<span class="string">'center, scale, rotation'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">          <span class="keyword">if</span>(initstate)&#123;</span><br><span class="line">          geoToscreen();</span><br><span class="line">          &#125;</span><br><span class="line">          &#125;)</span><br><span class="line">  &#125;);</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure><h2 id="点击绘制的方法"><a href="#点击绘制的方法" class="headerlink" title="点击绘制的方法"></a>点击绘制的方法</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">play</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    initstate=<span class="literal">true</span>;<span class="comment">//用来一个变量区别初始化，逻辑可忽略</span></span><br><span class="line">    <span class="comment">//(".esri-view-surface")是我把svg绘制添加到了这个view里面</span></span><br><span class="line">    <span class="keyword">var</span> poitMoveSvg = d3.select(<span class="string">".esri-view-surface"</span>)</span><br><span class="line">        .append(<span class="string">"svg"</span>)</span><br><span class="line">        .attr(<span class="string">"id"</span>, <span class="string">"d3_svg"</span>)</span><br><span class="line">        .attr(<span class="string">"class"</span>, <span class="string">"svgTransform"</span>)</span><br><span class="line">    g = d3.select(<span class="string">"#d3_svg"</span>)</span><br><span class="line">        .append(<span class="string">"g"</span>)</span><br><span class="line">        .attr(<span class="string">"id"</span>, <span class="string">"pointMove"</span>);</span><br><span class="line">    geoToscreen();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="主要的绘制方法"><a href="#主要的绘制方法" class="headerlink" title="主要的绘制方法"></a>主要的绘制方法</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">geoToscreen</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">document</span>.getElementById(<span class="string">"d3_svg"</span>).pauseAnimations()</span><br><span class="line">    d3.selectAll(<span class="string">"#pointMove path"</span>).remove();</span><br><span class="line">    d3.selectAll(<span class="string">"#pointMove circle"</span>).remove()</span><br><span class="line">    <span class="keyword">var</span> s_screen=view.toScreen(reyuan[<span class="number">0</span>].geometry);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">1</span>,len=reyuan.length;i&lt;len;i++)&#123;</span><br><span class="line">        <span class="keyword">var</span> color=<span class="string">'#17A05D'</span>;</span><br><span class="line">        <span class="keyword">var</span> e_screen=view.toScreen(reyuan[i].geometry);</span><br><span class="line">        <span class="keyword">var</span> path=<span class="string">'M'</span>+s_screen.x+<span class="string">','</span>+s_screen.y+<span class="string">'A800,800 0 0,1 '</span>+e_screen.x+<span class="string">','</span>+e_screen.y</span><br><span class="line">        <span class="keyword">var</span> arrow=<span class="string">'m0,0L-20,-10,-13,0,-20,10,0,0'</span>;</span><br><span class="line">            g.append(<span class="string">"path"</span>)<span class="comment">//画路径</span></span><br><span class="line">                .attr(<span class="string">"d"</span>, path)</span><br><span class="line">                .attr(<span class="string">"stroke"</span>, color)</span><br><span class="line">                .attr(<span class="string">"fill"</span>, <span class="string">"none"</span>)</span><br><span class="line">                .attr(<span class="string">"stroke-width"</span>, <span class="string">"2"</span>);</span><br><span class="line">            g.append(<span class="string">"path"</span>)<span class="comment">//画箭头.</span></span><br><span class="line">                .attr(<span class="string">"d"</span>, arrow)</span><br><span class="line">                .attr(<span class="string">"stroke"</span>, <span class="string">"#0188FB"</span>)</span><br><span class="line">                .attr(<span class="string">"fill"</span>, <span class="string">"#0188FB"</span>)</span><br><span class="line">                .attr(<span class="string">"stroke-width"</span>, <span class="string">"2"</span>)</span><br><span class="line">                .append(<span class="string">'animateMotion'</span>)</span><br><span class="line">                .attr(<span class="string">'path'</span>, path)</span><br><span class="line">                .attr(<span class="string">'rotate'</span>, <span class="string">"auto"</span>)</span><br><span class="line">                .attr(<span class="string">'dur'</span>, <span class="string">"8s"</span>)</span><br><span class="line">                .attr(<span class="string">'repeatCount'</span>, <span class="string">"indefinite"</span>);</span><br><span class="line">            g.append(<span class="string">"circle"</span>)<span class="comment">//起始点的圆圈</span></span><br><span class="line">                .attr(<span class="string">"r"</span>, <span class="number">8</span>)</span><br><span class="line">                .attr(<span class="string">"fill"</span>, <span class="string">"#E9A938"</span>)</span><br><span class="line">                .attr(<span class="string">"cx"</span>,s_screen.x)</span><br><span class="line">                .attr(<span class="string">"cy"</span>,s_screen.y);</span><br><span class="line">            g.append(<span class="string">"circle"</span>)</span><br><span class="line">                .attr(<span class="string">"r"</span>, <span class="number">8</span>)</span><br><span class="line">                .attr(<span class="string">"fill"</span>, <span class="string">"#81D841"</span>)</span><br><span class="line">                .attr(<span class="string">"cx"</span>,e_screen.x)</span><br><span class="line">                .attr(<span class="string">"cy"</span>,e_screen.y)</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">document</span>.getElementById(<span class="string">"d3_svg"</span>).unpauseAnimations()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="dom部分"><a href="#dom部分" class="headerlink" title="dom部分"></a>dom部分</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://d3js.org/d3.v5.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"https://js.arcgis.com/4.8/esri/css/main.css"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://js.arcgis.com/4.8/"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">html,body,#mapContainer&#123;</span></span><br><span class="line"><span class="undefined">    padding:0px;</span></span><br><span class="line"><span class="undefined">    margin:0px;</span></span><br><span class="line"><span class="undefined">width:100%;</span></span><br><span class="line"><span class="undefined">height:900px;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined">.svgTransform&#123;</span></span><br><span class="line"><span class="undefined">position: absolute;</span></span><br><span class="line"><span class="undefined">left:0px;</span></span><br><span class="line"><span class="undefined">top:0px;</span></span><br><span class="line"><span class="undefined">width:100%;</span></span><br><span class="line"><span class="undefined">height:100%;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">onload</span>=<span class="string">"init()"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">style</span>=<span class="string">"position:absolute;left:20px;top:20px;"</span> <span class="attr">onclick</span>=<span class="string">"play()"</span>&gt;</span>飞行图<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"mapContainer"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>以上，代码比较low，demo比较简洁，后期有时间会慢慢学习，欢迎批评指正！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&amp;nbsp;项目中有需要很多数据可视化的图表，用的最多的也就数当前的Echarts了，用过的同学都应该清楚，基本的图表来说Echarts做的已经很好了，&lt;br&gt;但是诟病最多的也当属Echarts的定制度不高，可配置性差，有时候需要调一点样式，都很难实现，所以最近想开始学习一
      
    
    </summary>
    
      <category term="可视化" scheme="http://heyheystone.com/categories/%E5%8F%AF%E8%A7%86%E5%8C%96/"/>
    
    
      <category term="D3.js" scheme="http://heyheystone.com/tags/D3-js/"/>
    
      <category term="ArcGIS" scheme="http://heyheystone.com/tags/ArcGIS/"/>
    
      <category term="Javascript" scheme="http://heyheystone.com/tags/Javascript/"/>
    
      <category term="迁徙图" scheme="http://heyheystone.com/tags/%E8%BF%81%E5%BE%99%E5%9B%BE/"/>
    
  </entry>
  
  <entry>
    <title>hexo博客源文件发布到github</title>
    <link href="http://heyheystone.com/hexosource/"/>
    <id>http://heyheystone.com/hexosource/</id>
    <published>2018-08-09T00:50:12.000Z</published>
    <updated>2018-09-11T08:26:56.306Z</updated>
    
    <content type="html"><![CDATA[<p>这几天刚刚搭建的hexo博客，玩的还不太熟，由于白天上班没太有时间写博客，下班回家电脑又没有hexo环境和<br>博客源文件，写起来很不方便。于是又折腾一下，把hexo的源文件也一起发布到github上，这样就可以随时随地<br>的去更新了。<br>具体的方法网上也有一大堆，说的都比较笼统，本身自己对github的很多操作也不是很熟，所以也花了一个多小时<br>才搞定，方法自己记录了下来：</p><h2 id="github上建立两个分支，一个默认就有的master，一个hexo（我的名字，随意起）"><a href="#github上建立两个分支，一个默认就有的master，一个hexo（我的名字，随意起）" class="headerlink" title="github上建立两个分支，一个默认就有的master，一个hexo（我的名字，随意起）"></a>github上建立两个分支，一个默认就有的master，一个hexo（我的名字，随意起）</h2><p>  1、master分支，用来存放编译后的博客文件<br>  2、hexo分支，用来存放博客的源文件</p><h2 id="新建hexo分支"><a href="#新建hexo分支" class="headerlink" title="新建hexo分支"></a>新建hexo分支</h2><p>  1、在本地新建一个分支：<br>  <code>git branch hexo</code><br>  2、切换到你的新分支:<br>  <code>git checkout hexo</code><br>  3、将新分支发布在github上：<br>  <code>git push origin hexo</code><br>  然后登陆github如图就显示有了hexo分支<br>  <img src="/images/sourcetogithub/branch.png" alt=""><br>  把新建的hexo分支设为默认分支<br>  <img src="/images/sourcetogithub/default.png" alt=""><br>  为什么要把hexo分支设为默认分支呢？<br>  由于你git push的源文件是提交到hexo分支里的，而你编译的博客文件，是按照_config.yml里的配置里提交的，配置里配的是<br>  master分支，这样做的话，git push 就提交到了默认的hexo分支里了，而博客就按照配置发布到了master分支里了。</p><h2 id="上传hexo源文件到github"><a href="#上传hexo源文件到github" class="headerlink" title="上传hexo源文件到github"></a>上传hexo源文件到github</h2><p>  执行：<br>  <code>git add .</code><br>  <code>git commit</code><br>  <code>git push</code><br>  hexo分支里就是源文件部分了<br>  <img src="/images/sourcetogithub/hexosource.png" alt=""></p><h2 id="换电脑重新写博客"><a href="#换电脑重新写博客" class="headerlink" title="换电脑重新写博客"></a>换电脑重新写博客</h2><p>  首先clone你的工程，由于上一步，设置的默认分支是hexo，所以clone的也就是默认的hexo分支里的源文件了<br>  clone以后如果电脑有hexo和node环境，就可以直接<br>  cnpm install<br>  然后就可以开始写博客了<br>  如果电脑没有环境，可以参考上一篇文章配一下基础hexo和node 环境了，地址：<br>  <a href="http://heyheystone.com/2018/08/01/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E5%A6%82%E4%BD%95%E7%94%A8hexo%E5%92%8Cgithub%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/#more">从头开始使用hexo和github搭建博客</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;这几天刚刚搭建的hexo博客，玩的还不太熟，由于白天上班没太有时间写博客，下班回家电脑又没有hexo环境和&lt;br&gt;博客源文件，写起来很不方便。于是又折腾一下，把hexo的源文件也一起发布到github上，这样就可以随时随地&lt;br&gt;的去更新了。&lt;br&gt;具体的方法网上也有一大堆
      
    
    </summary>
    
      <category term="hexo" scheme="http://heyheystone.com/categories/hexo/"/>
    
    
      <category term="hexo" scheme="http://heyheystone.com/tags/hexo/"/>
    
      <category term="github" scheme="http://heyheystone.com/tags/github/"/>
    
  </entry>
  
  <entry>
    <title>从头开始使用hexo和github搭建博客</title>
    <link href="http://heyheystone.com/hexoblog/"/>
    <id>http://heyheystone.com/hexoblog/</id>
    <published>2018-08-01T09:45:12.000Z</published>
    <updated>2018-09-11T08:26:49.592Z</updated>
    
    <content type="html"><![CDATA[<h1 id="创建博客主要有四步（以windows为例）："><a href="#创建博客主要有四步（以windows为例）：" class="headerlink" title="创建博客主要有四步（以windows为例）："></a>创建博客主要有四步（以windows为例）：</h1><p>1、安装node.js环境–hexo运行需要基于node环境<br>2、安装hexo<br>3、安装git客户端–方便的执行一些git命令<br>4、创建github仓库–用于作为发布博客的服务器</p><h2 id="第一步：安装node-js环境"><a href="#第一步：安装node-js环境" class="headerlink" title="第一步：安装node.js环境"></a>第一步：安装node.js环境</h2><p>进入官网(<a href="https://nodejs.org/en/" target="_blank" rel="noopener">https://nodejs.org/en/</a>)<br>下载安装包，直接点击安装即可,安装完后，运行<br><code>node -v</code><br>如下即表示安装成功<br><img src="/images/node-v.png" alt="node版本提示"></p><h2 id="第二步：安装hexo"><a href="#第二步：安装hexo" class="headerlink" title="第二步：安装hexo"></a>第二步：安装hexo</h2><p>第一步环境配置成功以后就可以使用npm安装Hexo了，建议使用淘宝镜像cnpm，速度要快很多<br><code>npm install -g hexo-cli</code><br><code>npm install hexo --save</code><br>然后在本地目录创建一个文件夹,比如我创建的是一个hexoBlog文件夹<br>然后cd到hexoBlog文件夹，然后依次执行下面的命令<br><code>hexo init</code><br><code>npm install</code><br>我当时执行命令的时候报错hexo不是内部命令<br>是因为没有默认设置环境变量，以前安装以后都会默认设置好环境变量，这次并没有默认设置好，不知道为什么，只需要设置一下hexo的环境变量即可，一般的位置是<br><code>C:\Users\stone\AppData\Roaming\npm\node_modules\hexo\node_modules\.bin</code><br>一切都设置完毕以后，启动本地Hexo服务<br>执行命令<br><code>hexo server</code><br><img src="/images/hexoserver.png" alt="node版本提示"><br>打开浏览器，输入<a href="http://localhost:4000/" target="_blank" rel="noopener">http://localhost:4000/</a> 出现下图，恭喜你，你已经成功了一大步！<br><img src="/images/success.png" alt="node版本提示"></p><h2 id="第三步-安装git客户端"><a href="#第三步-安装git客户端" class="headerlink" title="第三步 安装git客户端"></a>第三步 安装git客户端</h2><p>这一步比较简单，不详细描述，搜索git客户端下载，一路next安装，完成后<br>桌面鼠标右键会出现：<br>Git GUI Here 这个是可视化操作界面，我一般不怎么用<br>Git Bash Here  这个是命令行操作，这个用的比较多<br>说明安装成功了，待用</p><h2 id="第四步-创建github仓库"><a href="#第四步-创建github仓库" class="headerlink" title="第四步 创建github仓库"></a>第四步 创建github仓库</h2><p>进入github官网(<a href="http://www.github.com" target="_blank" rel="noopener">http://www.github.com</a>)<br>首先你得有一个github账号（手动滑稽）,没有的话就先注册，简单，不描述，注册后创建一个的仓库，用于存放博客<br>如下图：<br><img src="/images/createrep.png" alt="node版本提示"><br>仓库的名称必须是github名字.github.io，这个要注意<br>创建完仓库以后，就要配置SSH，这个是用来远程连接你的github账户的，有一个公钥和私钥<br>方法如下：<br>打开第三步安装的Git Bash Here<br>执行命令ssh-keyge 回车生成SSH，如果要设置了密码，每次提交github仓库时都要输入密码，不设置的话不用输入<br><img src="/images/111.png" alt="node版本提示"><br>说明创建成功！<br>一般存在于C:\Users\用户.ssh下，会出现两个id_rsa文件，打开id_rsa.pub文件，这里面就是SSH key的内容<br>打开你的github,右上角头像，点击Setting，然后选择SSH and GPG keys，点击右边Add SSH<br>然后把复制的SSH key内容粘贴到下面那个框里面，title随便自己写<br>过程可能会让你输入一次密码，输入即可！<br><img src="/images/sshkey.png" alt="node版本提示"><br>配置好就行了<br><em>这里要注意，复制的一定是.pub的文件里的内容，我第一次就复制错了，复制了第一个私钥的内容，结果报错：<br>GitHub添加SSH keys报错Key is invalid. It must begin with ‘ssh-ed25519’, ‘ssh-rsa’, ‘ssh-dss’, ‘ecdsa-sha</em><br>判断SSH是否配置好，用git bash 命令行输入<br>ssh -T <a href="mailto:git@github.com" target="_blank" rel="noopener">git@github.com</a><br>出现Hi heystone! You’ve successfully authenticated, but GitHub does not provide shell access. 就表示你已经配置好了SSH<br>SSH配置好了，进行下一步</p><h2 id="配置本地hexo仓库地址"><a href="#配置本地hexo仓库地址" class="headerlink" title="配置本地hexo仓库地址"></a>配置本地hexo仓库地址</h2><p>打开Hexo目录下的_config.yml，最下面<br><code>deploy:</code><br>  <code>type: git</code><br>  <code>repository: https://github.com/heystone/heystone.github.io.git</code><br>  <code>branch: master</code><br>repository配置为你的github仓库的地址，注意，：后又一个空格，这个很重要，第一次我没写空格，死活都提交不上去，也不报错，各种抓狂</p><h2 id="发布博客到github"><a href="#发布博客到github" class="headerlink" title="发布博客到github"></a>发布博客到github</h2><p>依次执行下面的命令<br><code>hexo clean</code><br>清理缓存<br><code>hexo g</code><br>编译博客<br><code>hexo d</code><br>发布到github仓库<br><img src="/images/setgit.png" alt="node版本提示"><br>我发布的时候出现这个问题，按照指示设置一下注册github的邮箱和github用户名即可，中间要输入一次密码<br>如果出现下图既证明已经没有出现问题<br>如果成功的话在浏览器输入(<a href="http://heystone.github.io" target="_blank" rel="noopener">http://heystone.github.io</a>) 就可以访问你的博客了。把用户名换为你自己的。<br>如果发布的时候出现错误：ERROR Deployer not found: git 意思就是用来发布文章的git没有安装<br>执行命令<br><code>npm install hexo-deployer-git --save</code><br>就可以解决了<br>好了，一切都大功告成了，后期可以申请一个自己的域名，我目前还没申请，申请以后再搞一下配置<br>完成以后，你们就可以尽情折腾自己的博客啦</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;创建博客主要有四步（以windows为例）：&quot;&gt;&lt;a href=&quot;#创建博客主要有四步（以windows为例）：&quot; class=&quot;headerlink&quot; title=&quot;创建博客主要有四步（以windows为例）：&quot;&gt;&lt;/a&gt;创建博客主要有四步（以windows为例
      
    
    </summary>
    
      <category term="hexo" scheme="http://heyheystone.com/categories/hexo/"/>
    
    
      <category term="hexo" scheme="http://heyheystone.com/tags/hexo/"/>
    
      <category term="github" scheme="http://heyheystone.com/tags/github/"/>
    
  </entry>
  
</feed>
