{"meta":{"title":"石头的前端Blog","subtitle":"前端的，也是世界的","description":"我不愿意跟使用IE的人做朋友","author":"石头","url":"http://heyheystone.com"},"pages":[{"title":"","date":"2018-09-03T09:39:36.548Z","updated":"2018-09-03T09:39:36.548Z","comments":true,"path":"404.html","permalink":"http://heyheystone.com/404.html","excerpt":"","text":"404"},{"title":"","date":"2018-09-11T06:40:43.078Z","updated":"2018-09-11T06:40:43.078Z","comments":true,"path":"googleb890cb9591429002.html","permalink":"http://heyheystone.com/googleb890cb9591429002.html","excerpt":"","text":"google-site-verification: googleb890cb9591429002.html"},{"title":"分类","date":"2018-08-02T04:37:15.000Z","updated":"2018-08-09T05:00:28.840Z","comments":true,"path":"categories/index.html","permalink":"http://heyheystone.com/categories/index.html","excerpt":"","text":""},{"title":"关于本人","date":"2018-08-02T04:37:38.000Z","updated":"2018-08-11T05:32:57.879Z","comments":true,"path":"about/index.html","permalink":"http://heyheystone.com/about/index.html","excerpt":"","text":"简介： 男，89年生，籍贯山东烟台，qq：1016186210 北京建筑大学，GIS（地理信息系统）专业硕士，2015年毕业，目前从事地理信息相关行业研发 主要喜欢前端，也兼职Java后台，和数据库相关"},{"title":"标签","date":"2018-08-02T04:37:28.000Z","updated":"2018-08-09T05:00:16.085Z","comments":true,"path":"tags/index.html","permalink":"http://heyheystone.com/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"Git基本知识和常用命令（一）","slug":"Git基本知识和常用命令","date":"2018-09-07T10:06:56.000Z","updated":"2018-09-11T08:26:35.679Z","comments":true,"path":"gitcommand/","link":"","permalink":"http://heyheystone.com/gitcommand/","excerpt":"","text":"常用的一些基本的Git命令对Git的了解只是存在于表面，平时里用的最多最多的命令也就是一下几个了12345678git init //初始化仓库git add xxx //把文件添加到仓库git commit -m \"xxx\" //文件提交到仓库git push //推送到远程库git pull // 从远程库拉取git clone //从远程库克隆工程git log //显示操作日志git log --pretty=oneline //格式化可加参数 也是下班的时间里，看了廖雪峰老师的关于Git的介绍，学习了一下，顺便蹭个加班，总结一下，要看原版的地址在这里廖雪峰Git介绍 版本回退在Git中，用HEAD表示当前版本，上一个版本就是HEAD^，上上一个版本就是HEAD^^ 依次类推要回退到上一个版本的话执行命令git reset --hard HEAD^依次类推，但是要回归的版本太多，总不能一直用HEAD^^^吧，这也不太现实，所以需要找到某一个版本的一个唯一的id,可以通过123456789101112$ git logcommit e475afc93c209a690c39c13a46716e8fa000c366 (HEAD -&gt; master)Author: Michael Liao &lt;askxuefeng@gmail.com&gt;Date: Fri May 18 21:03:36 2018 +0800 add distributedcommit eaadf4e385e865d25c48e7ca9c8395c3f7dfaef0Author: Michael Liao &lt;askxuefeng@gmail.com&gt;Date: Fri May 18 20:59:18 2018 +0800 wrote a readme file 可以看到每次操作后面都有一串常常的SHA1码了吧，那就是记录版本的唯一id，我们要回退到哪一个版本只需要操作git reset --hard e475a只需要输入前几位就行了，git会自动匹配，如果操作记录比较多，就多输入几位，但是版本回退有一个问题就是，如果我回退以后又后悔了怎么办，因为你回退以后，再运行 git log就看不到回退版本以后的那些版本了，怎么办呢？git当然是有办法的了。 版本前进命令 reflog 可查看每一次的命令12345$ git refloge475afc HEAD@&#123;1&#125;: reset: moving to HEAD^1094adb (HEAD -&gt; master) HEAD@&#123;2&#125;: commit: append GPLe475afc HEAD@&#123;3&#125;: commit: add distributedeaadf4e HEAD@&#123;4&#125;: commit (initial): wrote a readme file 然后重复操作git reset --hard xxxx就好了","categories":[{"name":"git","slug":"git","permalink":"http://heyheystone.com/categories/git/"}],"tags":[{"name":"github","slug":"github","permalink":"http://heyheystone.com/tags/github/"}]},{"title":"第一次将工程上传GitHub","slug":"第一次将工程上传GitHub","date":"2018-09-05T09:59:38.000Z","updated":"2018-09-11T08:26:43.778Z","comments":true,"path":"gitpush/","link":"","permalink":"http://heyheystone.com/gitpush/","excerpt":"","text":"第一次提交代码的一般步骤：1、新建仓库,不要手残点击生成readme.md,后面提交会有很多意外的坑2、进入项目目录执行 git init3、git add .4、git commit -m &quot;&quot;5、git remote add origin https://github.com/heystone/wx.git 改成自己的仓库地址6、git pull报错：fatal: refusing to merge unrelated histories执行：git merge origin/master --allow-unrelated-histories7、git push","categories":[{"name":"问题汇总 git","slug":"问题汇总-git","permalink":"http://heyheystone.com/categories/问题汇总-git/"}],"tags":[{"name":"github","slug":"github","permalink":"http://heyheystone.com/tags/github/"}]},{"title":"D3+Arcgis地图实现简单的迁徙图","slug":"D3-Arcgis地图实现简单的迁徙图","date":"2018-09-01T02:41:48.000Z","updated":"2018-09-11T08:27:08.508Z","comments":true,"path":"arcd3/","link":"","permalink":"http://heyheystone.com/arcd3/","excerpt":"","text":"&nbsp;项目中有需要很多数据可视化的图表，用的最多的也就数当前的Echarts了，用过的同学都应该清楚，基本的图表来说Echarts做的已经很好了，但是诟病最多的也当属Echarts的定制度不高，可配置性差，有时候需要调一点样式，都很难实现，所以最近想开始学习一下D3.js，D3的优势就之一也就是其高度的可定制化，完全都是自己来画的，但这也是其上手比较难的主要原因，需要有基本的前端Dom、JS、CSS基础才能做出比较炫酷的图表，不过也不至于灰心，慢慢去做就好了。&nbsp;目前项目中遇到一个ArcGIS地图上做迁徙图的功能，网上也有Echarts结合ArcGIS做的实例，本着爱折腾的态度，正合适去学习一下D3，自己着手去做了一下小demo，也没去完善，给大家一个参考。&nbsp;首先看下最终效果图： 首先引用D3.js目前是V5版本：&lt;script src=&quot;https://d3js.org/d3.v5.min.js&quot;&gt;&lt;/script&gt;可以去D3.js官网下载 引入ArcGIS类库我用的是4.6，目前最新的是4.8了&lt;link rel=&quot;stylesheet&quot; href=&quot;https://js.arcgis.com/4.8/esri/css/main.css&quot;&gt;&lt;script src=&quot;https://js.arcgis.com/4.8/&quot;&gt;&lt;/script&gt;可以去ArcGIS官网下载 初始化加载ArcGIS地图12345678910111213141516171819202122232425262728293031323334353637383940414243444546function init() &#123; require([\"esri/views/MapView\", \"esri/Map\", \"esri/layers/OpenStreetMapLayer\", \"esri/geometry/Extent\", \"esri/geometry/Point\", \"esri/geometry/ScreenPoint\", \"esri/tasks/support/Query\", \"esri/tasks/QueryTask\" ], function(MapView, Map, OpenStreetMapLayer, Extent, Point, ScreenPoint, Query, QueryTask) &#123; myMap = new Map(&#123; basemap:'osm' &#125;); view = new MapView(&#123; map: myMap, container: \"mapContainer\", center : [112.53,37.87], zoom : 12, &#125;); //由于我用的是测试数据，我在这自己发布了一个图层，调取他们的坐标 var layer=\"http://xx.xx.x.x:6080/y/MapServer\" var queryTask = new QueryTask(layer+\"/0\"); var query= new Query(); query.where = \"1 = 1\"; query.outFields = [\"*\"]; query.returnGeometry = true; queryTask.execute(query).then(function(results)&#123; if (results.features.length &gt;= 1) &#123; reyuan = results.features; &#125; &#125;); //监听平移，缩放和旋转 view.watch('center, scale, rotation',function()&#123; if(initstate)&#123; geoToscreen(); &#125; &#125;) &#125;); &#125; 点击绘制的方法123456789101112function play()&#123; initstate=true;//用来一个变量区别初始化，逻辑可忽略 //(\".esri-view-surface\")是我把svg绘制添加到了这个view里面 var poitMoveSvg = d3.select(\".esri-view-surface\") .append(\"svg\") .attr(\"id\", \"d3_svg\") .attr(\"class\", \"svgTransform\") g = d3.select(\"#d3_svg\") .append(\"g\") .attr(\"id\", \"pointMove\"); geoToscreen();&#125; 主要的绘制方法123456789101112131415161718192021222324252627282930313233343536373839function geoToscreen()&#123; document.getElementById(\"d3_svg\").pauseAnimations() d3.selectAll(\"#pointMove path\").remove(); d3.selectAll(\"#pointMove circle\").remove() var s_screen=view.toScreen(reyuan[0].geometry); for(var i=1,len=reyuan.length;i&lt;len;i++)&#123; var color='#17A05D'; var e_screen=view.toScreen(reyuan[i].geometry); var path='M'+s_screen.x+','+s_screen.y+'A800,800 0 0,1 '+e_screen.x+','+e_screen.y var arrow='m0,0L-20,-10,-13,0,-20,10,0,0'; g.append(\"path\")//画路径 .attr(\"d\", path) .attr(\"stroke\", color) .attr(\"fill\", \"none\") .attr(\"stroke-width\", \"2\"); g.append(\"path\")//画箭头. .attr(\"d\", arrow) .attr(\"stroke\", \"#0188FB\") .attr(\"fill\", \"#0188FB\") .attr(\"stroke-width\", \"2\") .append('animateMotion') .attr('path', path) .attr('rotate', \"auto\") .attr('dur', \"8s\") .attr('repeatCount', \"indefinite\"); g.append(\"circle\")//起始点的圆圈 .attr(\"r\", 8) .attr(\"fill\", \"#E9A938\") .attr(\"cx\",s_screen.x) .attr(\"cy\",s_screen.y); g.append(\"circle\") .attr(\"r\", 8) .attr(\"fill\", \"#81D841\") .attr(\"cx\",e_screen.x) .attr(\"cy\",e_screen.y) &#125; document.getElementById(\"d3_svg\").unpauseAnimations()&#125; dom部分123456789101112131415161718192021222324252627&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;script src=\"https://d3js.org/d3.v5.min.js\"&gt;&lt;/script&gt; &lt;link rel=\"stylesheet\" href=\"https://js.arcgis.com/4.8/esri/css/main.css\"&gt; &lt;script src=\"https://js.arcgis.com/4.8/\"&gt;&lt;/script&gt; &lt;style&gt; html,body,#mapContainer&#123; padding:0px; margin:0px; width:100%; height:900px; &#125; .svgTransform&#123; position: absolute; left:0px; top:0px; width:100%; height:100%; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body onload=\"init()\"&gt; &lt;button style=\"position:absolute;left:20px;top:20px;\" onclick=\"play()\"&gt;飞行图&lt;/button&gt; &lt;div id=\"mapContainer\"&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt; 以上，代码比较low，demo比较简洁，后期有时间会慢慢学习，欢迎批评指正！","categories":[{"name":"可视化","slug":"可视化","permalink":"http://heyheystone.com/categories/可视化/"}],"tags":[{"name":"D3.js","slug":"D3-js","permalink":"http://heyheystone.com/tags/D3-js/"},{"name":"ArcGIS","slug":"ArcGIS","permalink":"http://heyheystone.com/tags/ArcGIS/"},{"name":"Javascript","slug":"Javascript","permalink":"http://heyheystone.com/tags/Javascript/"},{"name":"迁徙图","slug":"迁徙图","permalink":"http://heyheystone.com/tags/迁徙图/"}]},{"title":"hexo博客源文件发布到github","slug":"hexo博客源码发布到github","date":"2018-08-09T00:50:12.000Z","updated":"2018-09-11T08:26:56.306Z","comments":true,"path":"hexosource/","link":"","permalink":"http://heyheystone.com/hexosource/","excerpt":"","text":"这几天刚刚搭建的hexo博客，玩的还不太熟，由于白天上班没太有时间写博客，下班回家电脑又没有hexo环境和博客源文件，写起来很不方便。于是又折腾一下，把hexo的源文件也一起发布到github上，这样就可以随时随地的去更新了。具体的方法网上也有一大堆，说的都比较笼统，本身自己对github的很多操作也不是很熟，所以也花了一个多小时才搞定，方法自己记录了下来： github上建立两个分支，一个默认就有的master，一个hexo（我的名字，随意起） 1、master分支，用来存放编译后的博客文件 2、hexo分支，用来存放博客的源文件 新建hexo分支 1、在本地新建一个分支： git branch hexo 2、切换到你的新分支: git checkout hexo 3、将新分支发布在github上： git push origin hexo 然后登陆github如图就显示有了hexo分支 把新建的hexo分支设为默认分支 为什么要把hexo分支设为默认分支呢？ 由于你git push的源文件是提交到hexo分支里的，而你编译的博客文件，是按照_config.yml里的配置里提交的，配置里配的是 master分支，这样做的话，git push 就提交到了默认的hexo分支里了，而博客就按照配置发布到了master分支里了。 上传hexo源文件到github 执行： git add . git commit git push hexo分支里就是源文件部分了 换电脑重新写博客 首先clone你的工程，由于上一步，设置的默认分支是hexo，所以clone的也就是默认的hexo分支里的源文件了 clone以后如果电脑有hexo和node环境，就可以直接 cnpm install 然后就可以开始写博客了 如果电脑没有环境，可以参考上一篇文章配一下基础hexo和node 环境了，地址： 从头开始使用hexo和github搭建博客","categories":[{"name":"hexo","slug":"hexo","permalink":"http://heyheystone.com/categories/hexo/"}],"tags":[{"name":"github","slug":"github","permalink":"http://heyheystone.com/tags/github/"},{"name":"hexo","slug":"hexo","permalink":"http://heyheystone.com/tags/hexo/"}]},{"title":"从头开始使用hexo和github搭建博客","slug":"从头开始使用hexo和github搭建博客","date":"2018-08-01T09:45:12.000Z","updated":"2018-09-11T08:26:49.592Z","comments":true,"path":"hexoblog/","link":"","permalink":"http://heyheystone.com/hexoblog/","excerpt":"","text":"创建博客主要有四步（以windows为例）：1、安装node.js环境–hexo运行需要基于node环境2、安装hexo3、安装git客户端–方便的执行一些git命令4、创建github仓库–用于作为发布博客的服务器 第一步：安装node.js环境进入官网(https://nodejs.org/en/)下载安装包，直接点击安装即可,安装完后，运行node -v如下即表示安装成功 第二步：安装hexo第一步环境配置成功以后就可以使用npm安装Hexo了，建议使用淘宝镜像cnpm，速度要快很多npm install -g hexo-clinpm install hexo --save然后在本地目录创建一个文件夹,比如我创建的是一个hexoBlog文件夹然后cd到hexoBlog文件夹，然后依次执行下面的命令hexo initnpm install我当时执行命令的时候报错hexo不是内部命令是因为没有默认设置环境变量，以前安装以后都会默认设置好环境变量，这次并没有默认设置好，不知道为什么，只需要设置一下hexo的环境变量即可，一般的位置是C:\\Users\\stone\\AppData\\Roaming\\npm\\node_modules\\hexo\\node_modules\\.bin一切都设置完毕以后，启动本地Hexo服务执行命令hexo server打开浏览器，输入http://localhost:4000/ 出现下图，恭喜你，你已经成功了一大步！ 第三步 安装git客户端这一步比较简单，不详细描述，搜索git客户端下载，一路next安装，完成后桌面鼠标右键会出现：Git GUI Here 这个是可视化操作界面，我一般不怎么用Git Bash Here 这个是命令行操作，这个用的比较多说明安装成功了，待用 第四步 创建github仓库进入github官网(http://www.github.com)首先你得有一个github账号（手动滑稽）,没有的话就先注册，简单，不描述，注册后创建一个的仓库，用于存放博客如下图：仓库的名称必须是github名字.github.io，这个要注意创建完仓库以后，就要配置SSH，这个是用来远程连接你的github账户的，有一个公钥和私钥方法如下：打开第三步安装的Git Bash Here执行命令ssh-keyge 回车生成SSH，如果要设置了密码，每次提交github仓库时都要输入密码，不设置的话不用输入说明创建成功！一般存在于C:\\Users\\用户.ssh下，会出现两个id_rsa文件，打开id_rsa.pub文件，这里面就是SSH key的内容打开你的github,右上角头像，点击Setting，然后选择SSH and GPG keys，点击右边Add SSH然后把复制的SSH key内容粘贴到下面那个框里面，title随便自己写过程可能会让你输入一次密码，输入即可！配置好就行了这里要注意，复制的一定是.pub的文件里的内容，我第一次就复制错了，复制了第一个私钥的内容，结果报错：GitHub添加SSH keys报错Key is invalid. It must begin with ‘ssh-ed25519’, ‘ssh-rsa’, ‘ssh-dss’, ‘ecdsa-sha判断SSH是否配置好，用git bash 命令行输入ssh -T git@github.com出现Hi heystone! You’ve successfully authenticated, but GitHub does not provide shell access. 就表示你已经配置好了SSHSSH配置好了，进行下一步 配置本地hexo仓库地址打开Hexo目录下的_config.yml，最下面deploy: type: git repository: https://github.com/heystone/heystone.github.io.git branch: masterrepository配置为你的github仓库的地址，注意，：后又一个空格，这个很重要，第一次我没写空格，死活都提交不上去，也不报错，各种抓狂 发布博客到github依次执行下面的命令hexo clean清理缓存hexo g编译博客hexo d发布到github仓库我发布的时候出现这个问题，按照指示设置一下注册github的邮箱和github用户名即可，中间要输入一次密码如果出现下图既证明已经没有出现问题如果成功的话在浏览器输入(http://heystone.github.io) 就可以访问你的博客了。把用户名换为你自己的。如果发布的时候出现错误：ERROR Deployer not found: git 意思就是用来发布文章的git没有安装执行命令npm install hexo-deployer-git --save就可以解决了好了，一切都大功告成了，后期可以申请一个自己的域名，我目前还没申请，申请以后再搞一下配置完成以后，你们就可以尽情折腾自己的博客啦","categories":[{"name":"hexo","slug":"hexo","permalink":"http://heyheystone.com/categories/hexo/"}],"tags":[{"name":"github","slug":"github","permalink":"http://heyheystone.com/tags/github/"},{"name":"hexo","slug":"hexo","permalink":"http://heyheystone.com/tags/hexo/"}]}]}